valid instructions: nop,mov,spc,jfg,....

valid 8bit registers: rga,rgb,rgc,rgd,....

valid 16bit registers: rmx,rsx,rbx,rpx

memory access: <16bit register> (in an 8bit instruction)
    using a 16bit register in an 8bit instruction refers to using the memory location pointed to by the register  
    for example: "mov rmx rga" refers to moving the contents of rga into the memory location pointed by rmx
label regex: _.*



jumps:

jmp _label | jfg 0b0111 _label
jz  _label | jfg 0b0110 _label //jump if 0
jnz _label | jfg 0b1110 _label //jump if not 0
js  _label | jfg 0b0011 _label //jump on sign change
jns _label | jfg 0b1011 _label //jump on no sign change
 

special instructions and what they mean:

interrupt modification:
inr mask | spc 14 mask //int &= ~mask
ins mask | spc 15 mask //int |= mask

port reading/writing:
rdp a mask | spc 2a mask
wrp a mask | spc 2a+1 mask

where:
    a in 0..3
    mask in 0..255

======================================
macros:
======================================

push x:
    mov   @rsx x
    add16 rsx -1

pop x:
    mov   x @rsx
    add16 rsx 1
